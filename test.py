"""
Telegram URL Classifier Bot
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç URL –Ω–∞ 4 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: Defacement, Phishing, Benign, Malware
"""

# 1. –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import logging
import re
import time
import pickle
import numpy as np
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from keras.models import load_model
from keras.preprocessing.sequence import pad_sequences
import os
from dotenv import load_dotenv
load_dotenv('token.env')

# 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)


class URLClassifierBot:
    def __init__(self):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        self.dp = None
        self._init_bot()  # –°–æ–∑–¥–∞–µ—Ç self.dp
        self._register_handlers()
        self.API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.API_TOKEN:
            logging.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
            exit(1)  # –î–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
        self._check_required_files()

    def _load_artifact(self, file_path, loader, is_model=False):
        if is_model:
            return loader(file_path)
        else:
            with open(file_path, 'rb') as f:
                return loader(f)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        self.model = self._load_artifact('url_classifier_LSTM.keras',load_model,is_model=True)
        self.tokenizer = self._load_artifact('tokenizer.pkl', pickle.load)
        self.label_encoder = self._load_artifact('LabelEncoder.pkl.pkl', pickle.load)
        # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        self.MAX_LEN = 150
        self.bot = Bot(token=self.API_TOKEN)
        self.dp = Dispatcher(self.bot)

        # 6. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    def _init_bot(self):
        self.bot = Bot(token="7930769291:AAEiCjYWaSMu6xqWGdtgi_JGa0NhlMbi1pU")
        self.dp = Dispatcher(self.bot)

    def _check_required_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        required = {
            'model': 'url_classifier_LSTM.keras',
            'tokenizer': 'tokenizer.pkl',
            'label_encoder': 'LabelEncoder.pkl'
        }

        missing = [name for name, path in required.items() if not os.path.exists(path)]

        if missing:
            error_msg = "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã:\n" + "\n".join(missing)
            logger.error(error_msg)
            raise FileNotFoundError(error_msg)

    def _get_env_var(self, var_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        value = os.getenv(var_name)
        if not value:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {var_name}")
            raise ValueError(f"–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {var_name} –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return value

    def _load_artifact(self, file_path, loader):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –º–æ–¥–µ–ª–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            if not os.path.exists(file_path):
                raise FileNotFoundError(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ {file_path}...")
            with open(file_path, 'rb') as f:
                return loader(f)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {str(e)}")
            raise

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.dp.register_message_handler(self._cmd_start, commands=['start'])
        self.dp.register_message_handler(self._process_url)

    def _create_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ URL"""
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        examples = [
            "https://www.google.com",
            "http://example.com/login.php",
            "https://github.com",
            "http://malicious-site.com/download.exe"
        ]
        keyboard.add(*[KeyboardButton(ex) for ex in examples])
        return keyboard

    def _is_valid_url(self, url):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL"""
        pattern = re.compile(
            r'^(?:http)s?://'  # –ü—Ä–æ—Ç–æ–∫–æ–ª
            r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+)'  # –î–æ–º–µ–Ω
            r'(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)'  # TLD
            r'(?:/?|[/?]\S+)$',  # –ü—É—Ç—å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            re.IGNORECASE
        )
        return bool(re.match(pattern, url))

    async def _cmd_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "üîç <b>URL Classifier Bot</b>\n\n"
            "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫–∏ –Ω–∞:\n"
            "‚Ä¢ üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ (Benign)\n"
            "‚Ä¢ üé≠ –î–µ—Ñ–µ–π—Å–º–µ–Ω—Ç (Defacement)\n"
            "‚Ä¢ üé£ –§–∏—à–∏–Ω–≥ (Phishing)\n"
            "‚Ä¢ ü¶† –í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ (Malware)\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:"
        )

        try:
            await message.answer(
                welcome_text,
                parse_mode='HTML',
                reply_markup=self._create_keyboard()
            )
            logger.info(f"New user: {message.from_user.id}")
        except Exception as e:
            logger.error(f"Start command error: {str(e)}")

    async def _process_url(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            url = message.text.strip()
            user = message.from_user
            logger.info(f"Request from {user.id}: {url}")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
            if not self._is_valid_url(url):
                await message.answer(
                    "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL!</b>\n"
                    "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
                    "<code>https://www.example.com/path?param=value</code>",
                    parse_mode='HTML'
                )
                return

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await message.answer("‚è≥ <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É...</b>", parse_mode='HTML')

            # –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ URL
            start_time = time.time()
            sequence = self.tokenizer.texts_to_sequences([url])
            padded = pad_sequences(sequence, maxlen=self.MAX_LEN)

            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            probabilities = self.model.predict(padded, verbose=0)[0]
            processing_time = time.time() - start_time

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results = []
            for cls, prob in zip(self.label_encoder.classes_, np.round(probabilities * 100, 1)):
                icon = "üü¢" if cls == "benign" else "üî¥"
                results.append(f"{icon} <b>{cls.upper()}</b>: <code>{prob}%</code>")

            main_category = self.label_encoder.classes_[np.argmax(probabilities)]
            result_text = (
                "üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:</b>\n\n" +
                "\n".join(results) +
                f"\n\n‚è± <b>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> <code>{processing_time:.2f} —Å–µ–∫</code>" +
                f"\nüö® <b>–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:</b> <code>{main_category.upper()}</code>"
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await self.bot.delete_message(
                chat_id=message.chat.id,
                message_id=processing_msg.message_id
            )
            await message.answer(
                result_text,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            logger.info(f"Success: {url}")

        except Exception as e:
            error_text = "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏!</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."
            await message.answer(error_text, parse_mode='HTML')
            logger.error(f"Processing error: {str(e)}", exc_info=True)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting bot...")
        try:
            executor.start_polling(self.dp, skip_updates=True)
        except Exception as e:
            logger.critical(f"Bot failed: {str(e)}", exc_info=True)
            raise


if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    if not os.getenv('TELEGRAM_BOT_TOKEN'):
        logger.error("–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        exit(1)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        bot = URLClassifierBot()
        bot.run()
    except Exception as e:
        logger.critical(f"Failed to initialize bot: {str(e)}")