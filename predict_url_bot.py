import asyncio
import logging
import pickle
import re
import time
import numpy as np
from keras.preprocessing.sequence import pad_sequences
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from keras.models import load_model
from keras.src.utils import pad_sequences
from aiogram.fsm.state import StatesGroup, State


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token="7930769291:AAEiCjYWaSMu6xqWGdtgi_JGa0NhlMbi1pU")
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()
MAX_LEN = 150
logger = logging.getLogger(__name__)
#–ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
MODEL = load_model('url_classifier_LSTM1.keras')
with open('tokenizer.pkl', 'rb') as f:
    TOKENIZER = pickle.load(f)
with open('LabelEncoder.pkl', 'rb') as f:
      LE = pickle.load(f)

from datetime import datetime
dp["started_at"] = datetime.now().strftime("%Y-%m-%d %H:%M")

@dp.message(Command("info"))
async def cmd_info(message: types.Message, started_at: str):
    await message.answer(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω {started_at}")

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
#@dp.message(Command("start"))
#async def cmd_start(message: types.Message):
#    await message.answer("–ù–∞–ø–∏—à–∏ –º–Ω–µ URL –∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ—ë –Ω–∞ –≤—Ä–µ–¥–æ–Ω–æ—Å—Ç—å")

@dp.message(Command("dice"))
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")

class URLs(StatesGroup):
     write_url_name = State()
     url_classifier = State()

def predict_url_type(url):
    try:
        # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è
        sequence = TOKENIZER.texts_to_sequences([url])
        padded = pad_sequences(sequence, maxlen=MAX_LEN)

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        proba = MODEL.predict(padded)[0]
        return {
            "url": url,
            "predicted_class": LE.inverse_transform([np.argmax(proba)])[0],
            "probabilities": dict(zip(LE.classes_, np.round(proba, 3)))
        }
    except Exception as e:
        return {"error": str(e)}

def make_row_keyboard(items: list[str]) -> ReplyKeyboardMarkup:
    row = [KeyboardButton(text=item) for item in items]
    return ReplyKeyboardMarkup(keyboard=[row], resize_keyboard=True)
available_url_names = [
    "http://phishing.com",
    "https://google.com",
    "https://example.com"
]

def _is_valid_url(url):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL"""
    pattern = re.compile(
        r'^(?:http)s?://'  # –ü—Ä–æ—Ç–æ–∫–æ–ª
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+'  # –î–æ–º–µ–Ω
        r'(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)'  # TLD
        r'(?:/?|[/?]\S+)$)',  # –ü—É—Ç—å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        re.IGNORECASE
    )
    return bool(re.match(pattern, url))


@dp.message(StateFilter(None), Command('start'))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer(
        text='–ù–∞–ø–∏—à–∏—Ç–µ URL, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é –∏–∑ —Å–ø–∏—Å–∫–∞ü§©',
        reply_markup = make_row_keyboard(available_url_names)
        )
    await state.set_state(URLs.write_url_name)

    #@dp.message(URLs.write_url_name)
    #if _is_valid_url(url):

@dp.message(URLs.write_url_name)
async def _process_url(message: types.Message):
    url = message.text
    user = message.from_user
    logger.info(f"Request from {user.id}: {url}")
    if not _is_valid_url(url):
        await message.answer(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL!</b>\n"
            "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
            "<code>https://www.example.com/path?param=value</code>",
            parse_mode='HTML'
        )
        return
    predict_url = predict_url_type(url)
    await message.answer(f"üîó –°—Å—ã–ª–∫–∞: {predict_url['url']}\n"
        f"üìä –ö–ª–∞—Å—Å: {predict_url['predicted_class']}\n\n"
        f"üìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:\n"
        f"‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è: {predict_url['probabilities'].get('benign', 0):.3f}\n"
        f"‚Ä¢ –ü–æ—Ä—á–∞: {predict_url['probabilities'].get('defacement', 0):.3f}\n"
        f"‚Ä¢ –§–∏—à–∏–Ω–≥: {predict_url['probabilities'].get('phishing', 0):.3f}\n"
        f"‚Ä¢ –í–∏—Ä—É—Å: {predict_url['probabilities'].get('malware', 0):.3f}")





async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())







